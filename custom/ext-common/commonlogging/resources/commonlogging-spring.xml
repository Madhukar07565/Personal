<?xml version="1.0" encoding="UTF-8"?>
<!-- ~ [y] hybris Platform ~ ~ Copyright (c) 2000-2016 SAP SE ~ All rights 
	reserved. ~ ~ This software is the confidential and proprietary information 
	of SAP ~ Hybris ("Confidential Information"). You shall not disclose such 
	~ Confidential Information and shall use it only in accordance with the ~ 
	terms of the license agreement you entered into with SAP Hybris. -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd">
           
	<context:annotation-config/>
	<context:spring-configured /> 
	
	<context:component-scan base-package="com.cnk.travelogix.exception.commonlogging.*" />
	
	<!-- Enable annotation based AOP definitions -->
	<aop:aspectj-autoproxy proxy-target-class="true"  expose-proxy="true"/>

	<alias name="defaultTravelogixErrorMasterService" alias="travelogixErrorMasterService" />
	<bean id="defaultTravelogixErrorMasterService"
		class="com.cnk.travelogix.exception.commonlogging.service.impl.DefaultTravelogixErrorMasterService">
		<property name="travelogixErrorMasterDAO" ref="travelogixErrorMasterDAO" />
	</bean>

	<alias name="defaultTravelogixErrorMasterFacade" alias="travelogixErrorMasterFacade" />
	<bean id="defaultTravelogixErrorMasterFacade"
		class="com.cnk.travelogix.exception.commonlogging.facades.impl.DefaultTravelogixErrorMasterFacade">
		<property name="travelogixErrorMasterService" ref="travelogixErrorMasterService" />
	</bean>
	
	<bean id="CommonloggingSystemSetup"
		class="com.cnk.travelogix.exception.commonlogging.setup.CommonloggingSystemSetup"
		parent="abstractCoreSystemSetup" />
	
	<bean id="loggingAspect"
		class="com.cnk.travelogix.exception.commonlogging.aop.TravelogixAuditingAspect" />

   	<bean id="exceptionHandler"
       class="com.cnk.travelogix.exception.commonlogging.aop.TravelogixIncidentThrowsAspect" >
       <!-- <property name="travelogixErrorMasterService" ref="travelogixErrorMasterService" />
       <property name="eventService" ref="eventService" />-->
    </bean>   
    
    
    <alias name="defaultTravelogixSupplierErrorService" alias="travelogixSupplierErrorService" />
	<bean id="defaultTravelogixSupplierErrorService"
		class="com.cnk.travelogix.exception.commonlogging.service.impl.DefaultTravelogixSupplierErrorService">
		<property name="travelogixErrorMasterDAO" ref="travelogixErrorMasterDAO" />
	</bean>
	
    <!-- 
    <bean id="customLogLevel"
       class="com.cnk.travelogix.exception.commonlogging.level.TravelogixAuditLogLevel" />  -->
       
    <bean id="coreAspect"
       class="com.cnk.travelogix.exception.commonlogging.aop.CoreAspect" />   

	<!-- <bean id="testService"
		class="com.cnk.travelogix.exception.commonlogging.level.TravelogixLogLevelService" />
		
    <bean class="com.cnk.travelogix.exception.commonlogging.master.TravelogixErrorExceptionMaster">
    	<property name="sneeze" ref="sneeze" />
    </bean>
  
    <bean id="sneeze" class="com.cnk.travelogix.exception.commonlogging.master.TravelogixError"/> -->
    
    <!-- 
	<bean id="clientcommercialsProfBean" class="com.cnk.travelogix.client.commercials.aop.ClientcommercialsProfilingAspect"/>
	<aop:config proxy-target-class="true">
  		<aop:aspect id="clientcommercialsProfAspect" ref="clientcommercialsProfBean" >
    	  <aop:pointcut id="profiledMethods" 
	      	expression="execution(* getModificationTime(..))" />  	            
	   		<aop:around pointcut-ref="profiledMethods" method="profile" />
  		</aop:aspect>
	</aop:config>
	 
	<aop:config proxy-target-class="true" expose-proxy="true">
		<aop:aspect id="prepWidgetAspect" ref="reCaptchaAspect">
			<aop:around method="prepare"
			            pointcut="execution(* de.hybris.platform.security.captcha.controllers.pages..*.getWidget(..))"/>
		</aop:aspect>
		<aop:aspect id="prepRegistratonReCaptchaAspect" ref="reCaptchaAspect">
			<aop:around method="prepare"
			            pointcut="execution(* de.hybris.platform..controllers.pages..*.doLogin(..))"/>
		</aop:aspect>
		<aop:aspect id="registratonReCaptchaAspect" ref="reCaptchaAspect">
			<aop:around method="advise"
			            pointcut="execution(* de.hybris.platform..controllers.pages..*.doRegister(..))"/>
		</aop:aspect>
		<aop:aspect id="prepCheckoutRegistratonReCaptchaAspect" ref="reCaptchaAspect">
			<aop:around method="prepare"
			            pointcut="execution(* de.hybris.platform..controllers.pages..*.doCheckoutLogin(..))"/>
		</aop:aspect>
		<aop:aspect id="checkoutRegistratonReCaptchaAspect" ref="reCaptchaAspect">
			<aop:around method="advise"
			            pointcut="execution(* de.hybris.platform..controllers.pages..*.doCheckoutRegister(..))"/>
		</aop:aspect>
		<aop:aspect id="accountEmailUpdateReCaptchaAspect" ref="reCaptchaAspect">
			<aop:around method="advise"
			            pointcut="execution(* de.hybris.platform..controllers.pages..*.updateEmail(..))"/>
		</aop:aspect>
	</aop:config>
	
	<alias name="defaultReCaptchaAspect" alias="reCaptchaAspect"/>
	<bean name="defaultReCaptchaAspect" class="de.hybris.platform.security.captcha.ReCaptchaAspect">
		<property name="siteConfigService" ref="siteConfigService"/>
		<property name="baseStoreService" ref="baseStoreService"/>
	</bean> -->
	
</beans>
